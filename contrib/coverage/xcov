#!/usr/bin/perl -w

# Requirement
#   - subversion-perl package 
#   - perl-XML-XPath package
#
use strict;
use Getopt::Long;
use POSIX;
use Cwd 'abs_path';
use SVN::Client;
use File::Basename;
use File::Path 'rmtree';
use XML::XPath;
use XML::XPath::XMLParser;
use File::Copy;

#
# function prototype
#
sub print_usage();
sub get_path($);
sub get_upper_path($);
sub get_abs_path($);
sub get_abs_path2($$);
sub get_value($$);
sub get_config($);
sub get_options();
sub initialize();
sub get_svn_working_rev();
sub get_svn_diff($);
sub get_svn_author($$);
sub run_lcov();
sub run_genhtml($$$);
sub get_coverage();
sub get_cppcheck_includes();
sub get_target_sources($);
sub get_defects();
sub get_style();
sub print_var(@);
sub print_global_vars();
sub now();
sub report_printf(@);
sub report_print(@);
sub sigint_handler();

#
# global variables
#
our $util_version = "1.0.0";
our $util_name = basename($0);
our $util_path = dirname(abs_path($0));
our $current_dir = getcwd;
our $parsediff_pl = $util_path."/parsediff";
our $svn_client = undef;
our $diff_result_file = undef;

# options
our $opt_target_revision = undef;
our $opt_svn_root = undef;
our $opt_lcov_input_file = undef;
our $opt_cppcheck_input_file = undef;
our $opt_config_file = undef;
our $opt_help = undef;
our $opt_is_remove_diff = 0;
our $opt_is_zerocounters = 0;
our $opt_is_disable_print_code = 0;
our $opt_is_disable_coverage = 0;
our $opt_is_disable_cppcheck = 0;
our $opt_is_disable_cppstyle = 0;
our $opt_is_target_all = 0;
our $opt_is_coverage_all = 0;
our $opt_is_cppcheck_all = 0;
our $opt_is_cppstyle_all = 0;
our $opt_is_history_mode = 0;
our $opt_is_show_config = 0;
our $opt_is_highlight_all = undef;

# executables
our $genhtml_exec = $util_path."/genhtml";
our $lcov_exec = $util_path."/lcov";

# configurations from file
# tools
our $cppcheck_exec = undef;
our $cppcheck_opts = undef;
our $cppcheck_inc  = undef;
our $cppcheck_src  = undef;
our $cppstyle_exec = undef;
our $cppstyle_rule = undef;
our $cppstyle_src  = undef;

# output dir/file 
our $output_dir = undef;
our $output_summary_report_file = undef;
our $output_lcov_report_file = undef;
our $output_genhtml_report_dir = undef;
our $output_cppcheck_report_file = undef;
our $output_cppstyle_report_file = undef;


sub print_usage()
{
	print(STDOUT <<END_OF_USAGE);
$util_name $util_version

Usage : $util_name [options]

Common:
  -r, --revision REV         Target revision (default: BASE)
  -d, --rootdir DIR          Path of subversion root (default: ../)
      --remove-diff          Remove diff result file after processing
  -f, --config FILE          Specify configuration file
  -s, --show-config          Print configurations
  -a, --all                  Run $util_name for all source files 
                             Identical with '--coverage-all --cppcheck-all --cppstyle-all'
  -h, -?, --help             Print this message

Test coverage:
  -l, --lcov FILE            Generate HTML output from FILE (lcov will not be executed)
  -z, --zerocounters         Reset all execution counts to zero (identical with 'lcov -z')
      --disable-print-code   Do not show modified codes which were not executed
      --no-coverage          Do not execute LCOV/GENHTML for test coverage
      --coverage-all         Run LCOV/GENHTML for all source files
  -i, --history              Turn on history mode. Coverage report will include the difference between
                             current and previous result.

CppCheck:
  -c, --cppcheck FILE        Find new defects from FILE (CppCheck will not be executed)
      --no-cppcheck          Do not execute CppCheck for static code analysis
      --cppcheck-all         Run CppCheck for all source files

NSIQCppStyle
      --no-cppstyle          Do not execute NSIQCppStyle for checking coding convention
      --cppstyle-all         Run NSIQCppStyle for all source files

Highlight
      --highlight-all

END_OF_USAGE
	;

}

sub get_path($)
{
	my $path = shift;
	
	while(-f $path) {
		$path =~ s/\/[^\/]+$//;
	}
	return $path;
}

sub get_upper_path($)
{
	my $path = shift;
	
	my @dirs = split(/\//, $path);
	pop(@dirs);
	return join('/', @dirs);
}

sub get_abs_path($)
{
	my $path = shift;

	if (!defined($path)) {
		return undef;
	}

	if ($path !~ /^\//) {
		$path = abs_path($current_dir."/".$path);
	} else {
		$path = abs_path($path);
	}
	return $path;
}

sub get_abs_path2($$)
{
	my $path = shift;
	my $base_dir = shift;

	if (!defined($path) || length($path) == 0) {
		return undef;
	}
	
	if ($path !~ /^\//) {
		$path = abs_path($base_dir."/".$path);
	} else {
		$path = abs_path($path);
	}
	return $path;
}

sub get_value($$)
{
	if (defined($_[0]) && length($_[0]) > 0) {
		return $_[0];
	} else {
		return $_[1];
	}
}

sub get_config($)
{
	my $configfile = shift;
	my %config = ();

	$configfile = get_abs_path2($configfile, $util_path);
	
	printf("%s: read config from %s\n", $util_name, $configfile);

	# read config file
	open(CFG, "<$configfile") || die "cannot open config file '$configfile'";

	while(<CFG>) {
		chomp;
		#print "$_\n";
		if (/^$/) { next; }
		if (/^#/) { next; }
		if (/.+=.+/) {
			my ($key, $val) = split(/\s*=\s*/, $_);

			# multiple lines
			while ($val =~ /\\$/) {
				$val =~ s/\\$//;
				
				my $more = <CFG>;
				if (!defined($more)) {
					last;	
				}
				chomp($more);
				$more =~ s/^\s+//;
				$more =~ s/\s+$//;
				$val.=" ".$more;
			}

			$val =~ s/^"//;
			$val =~ s/"$//;

			$config{$key} = $val;
		}
	}
	close(CFG); 

	#
	# get config
	#

	# tools
	$cppcheck_exec = get_abs_path($config{"cppcheck_exec"});	
	if (defined($cppcheck_exec) && -e $cppcheck_exec) {
		$cppcheck_opts = get_value($config{"cppcheck_option"}, "");
		$cppcheck_inc  = get_value($config{"cppcheck_include_dir"}, "");
		$cppcheck_src  = get_value(get_abs_path($config{"cppcheck_source_dir"}), $opt_svn_root);
	} else {
		$opt_is_disable_cppcheck = 1;
	}

	$cppstyle_exec = get_abs_path($config{"cppstyle_exec"});	
	if (defined($cppstyle_exec) && -e $cppstyle_exec) {
		$cppstyle_rule = get_value(get_abs_path($config{"cppstyle_rule"}), $current_dir);
		$cppstyle_src  = get_value(get_abs_path($config{"cppstyle_source_dir"}), $opt_svn_root);
	} else {
		$opt_is_disable_cppstyle = 1;
	}

	# output path (output_dir is the base directory of all output reports)	
	$output_dir = get_value(get_abs_path($config{"output_directory"}), 
			get_abs_path($util_name."_output"));

	unlink($output_dir) if (! -d $output_dir);
	mkdir($output_dir) if (! -e $output_dir);

	$output_summary_report_file = get_value(get_abs_path2($config{"output_summary_report"}, $output_dir), 
					get_abs_path($output_dir."/report.txt"));
	$output_lcov_report_file = get_value(get_abs_path2($config{"output_lcov_report"}, $output_dir), 
					get_abs_path($output_dir."/coverage.lcov"));
	$output_cppcheck_report_file = get_value(get_abs_path2($config{"output_cppcheck_report"}, $output_dir), 
					get_abs_path($output_dir."/cppcheck-report.xml"));
	$output_cppstyle_report_file = get_value(get_abs_path2($config{"output_cppstyle_report"}, $output_dir), 
					get_abs_path($output_dir."/cppstyle-report.txt"));
	$output_genhtml_report_dir = get_value(get_abs_path2($config{"output_coverage_report"}, $output_dir),
					get_abs_path($output_dir."/lcov"));

	unlink($output_summary_report_file) if (-e $output_summary_report_file);
	return 0;
}

sub get_options()
{
	if (!GetOptions("revision|r=s"		=> \$opt_target_revision,
			"rootdir|d=s"		=> \$opt_svn_root,
			"config|f=s"		=> \$opt_config_file,
			"lcov|l=s"		=> \$opt_lcov_input_file,
			"cppcheck|c=s"		=> \$opt_cppcheck_input_file,
			"remove-diff"		=> \$opt_is_remove_diff,
			"zerocounters|z"	=> \$opt_is_zerocounters,
			"disable-print-code"	=> \$opt_is_disable_print_code,
			"no-coverage"		=> \$opt_is_disable_coverage,
			"no-cppcheck"		=> \$opt_is_disable_cppcheck,
			"no-cppstyle"		=> \$opt_is_disable_cppstyle,
			"all|a"			=> \$opt_is_target_all,
			"coverage-all"		=> \$opt_is_coverage_all,
			"cppcheck-all"		=> \$opt_is_cppcheck_all,
			"cppstyle-all"		=> \$opt_is_cppstyle_all,
			"history|i"		=> \$opt_is_history_mode,
			"show-config|s"		=> \$opt_is_show_config,
			"help|h|?"		=> \$opt_help,
			"highlight-all"		=> \$opt_is_highlight_all,
			)) 
	{
		print_usage();
		exit(0);
	} 
	
	if ($opt_help) {
		print_usage();
		exit(0);
	} 
	if ($opt_is_zerocounters) {
		system("$lcov_exec -z -d $current_dir");
		exit(0);
	}
	
	# check input file
	if (defined($opt_lcov_input_file)) {
		$opt_lcov_input_file = get_abs_path($opt_lcov_input_file);
		if (! -e $opt_lcov_input_file) {
			print(STDERR "file not found: $opt_lcov_input_file\n");
			exit(0);
		}

		print(STDERR "NOTICE: turn off history mode when LCOV input file is specified\n");
		$opt_is_history_mode = 0;

	}
	if (defined($opt_cppcheck_input_file)) {
		$opt_cppcheck_input_file = get_abs_path($opt_cppcheck_input_file);
		if (! -e $opt_cppcheck_input_file) {
			print(STDERR "file not found: $opt_cppcheck_input_file\n");
			exit(0);
		}
	}

	# set svn root path and check it
	$opt_svn_root = get_value(get_abs_path($opt_svn_root), get_abs_path($current_dir."/.."));
	if (! -e $opt_svn_root."/.svn") {
		print(STDERR "Error: $opt_svn_root is not a working directory\n");
		print_usage();
		exit(0);
	}

	if ($opt_is_target_all) {
		$opt_is_coverage_all = $opt_is_cppcheck_all = $opt_is_cppstyle_all = 1;
	}

	if (defined($opt_is_highlight_all)) {
		$opt_is_highlight_all = 1;
	} else {
		$opt_is_highlight_all = 0;
	}
}

sub initialize()
{
	# get options from command line arguments
	get_options();

	# get configuration from file
	get_config(get_value(get_abs_path($opt_config_file), get_abs_path($util_path."/xcov.conf")));

	$svn_client = new SVN::Client();
	if (!defined($svn_client)) {
		die "cannot instantiate SVN::Client";
	}
	
	# import parsediff
	do($parsediff_pl);
}

sub get_svn_working_rev()
{
	my $path;
	my $info;
	my $rev = undef;

	if ( !defined($svn_client)) {
		return undef;
	}

	my $receiver = sub {
		$path = shift;
		$info = shift;
		$rev = $info->rev;
	};

	chdir($opt_svn_root);
	$svn_client->info("BUILD_NUMBER", undef, 'WORKING', $receiver, 1);
	chdir;
	return $rev;	
}

sub get_svn_diff($)
{
	my $rev = shift;
	my $output;

	if (!defined($svn_client)) {
		return undef;
	}

	if (defined($rev)) {
		$output = $output_dir."/svn-diff-r$rev";
	} else {
		$rev = 'BASE';
		$output = $output_dir."/svn-diff";
	}

	chdir($opt_svn_root);
	$svn_client->diff([], "", $rev, "", 'WORKING',
			1, 0, 1, $output, *STDERR);
	chdir;
	return $output;	
}

sub get_svn_author($$)
{
	my $rev1 = shift;
	my $rev2 = shift;
	if ( !defined($svn_client) || !defined($rev1) || !defined($rev2)) {
		return undef;
	}

	my $author;
	my $receiver = sub {
		$author = $_[2];	
	};

	chdir($opt_svn_root);
	$svn_client->log("", $rev1, $rev2, 0, 0, $receiver);
	chdir;
	return $author;
}

sub run_lcov()
{
	if (defined($opt_lcov_input_file)) {
		return $opt_lcov_input_file;
	}

	my $lcov_interm_file = $output_dir."/.interm.lcov";
	unlink($output_lcov_report_file);

	# execute lcov
	system("$lcov_exec -d $current_dir -c -o \"$lcov_interm_file\"");
	system("$lcov_exec -r \"$lcov_interm_file\" \"\/usr\/\*\" > $output_lcov_report_file");
	unlink($lcov_interm_file);
	
	return $output_lcov_report_file;
}

sub run_genhtml($$$)
{
	my $diff = shift;
	my $lcov_output_file = shift;
	my $old_lcov_output_file = undef;
	my $genhtml_opts;

	if (defined($_[0])) {
		$old_lcov_output_file = shift;
	}

	if (!defined($diff) || !defined($lcov_output_file)) {
		return -1;
	}
	if ( ! -e $diff || ! -e $lcov_output_file) {
		return -1;
	}

	# set options 
	$genhtml_opts = "--show-details --legend --highlight --prefix=$opt_svn_root";
	$genhtml_opts.= " -o $output_genhtml_report_dir --report-file=$output_summary_report_file";

	if (!$opt_is_coverage_all) {
		$genhtml_opts .= " --modified-file-only";
	}
	if ($opt_is_disable_print_code) {
		$genhtml_opts .= " --disable-print-code";
	}
	if (-s $diff) {
		$genhtml_opts .= " --diff-file=$diff";
	}
	if (defined($old_lcov_output_file)) {
		$genhtml_opts .= " --lcov-diff=$old_lcov_output_file";
	} 
	if ($opt_is_highlight_all) {
		$genhtml_opts .= " --highlight-all";
	}

	print("\nExecute GENHTML\n");
	print_var("GENHTML options", $genhtml_opts);

	rmtree($output_genhtml_report_dir);
	
	# execute genhtml
	system("$genhtml_exec $genhtml_opts $lcov_output_file");

	return 0;
}

sub get_coverage()
{
	my $old_lcov_output_file = undef;

	if ($opt_is_history_mode) {
		if (-e $output_lcov_report_file && -s $output_lcov_report_file) {
			$old_lcov_output_file = $output_lcov_report_file.".old";

			unlink($old_lcov_output_file) if (-e $old_lcov_output_file);
			move($output_lcov_report_file, $old_lcov_output_file);	
		}
	}

	my $lcov_output_file = run_lcov();

	return (run_genhtml($diff_result_file, $lcov_output_file, $old_lcov_output_file));
}

sub get_cppcheck_includes()
{
	my @includes;
	my @incs = split(/\s+/, $cppcheck_inc);
	for my $inc (@incs) {
		if ($inc !~ /^\//) {
			$inc = get_abs_path($current_dir."/".$inc);
		}
		if (defined($inc) && -d $inc) {
			push(@includes, $inc);
		}
	}

	if (defined($cppcheck_src) && -d $cppcheck_src) {
		chdir($cppcheck_src);
		my $cwd = getcwd;
		foreach my $filename (glob('*')) {
			if (-d $filename && $filename !~ /^\./) {
				push(@includes, $cwd."/".$filename);
			}
		}
		chdir;
	}
	return "-I".join(" -I", @includes);
}

sub get_target_sources($)
{
	my $info = shift;
	my @srcs;
	
	foreach (keys %{$info}) {
		if (/\.c$/ || /\.h$/) {
			push(@srcs, $_);		
		}
	}
	return join(' ', @srcs);
}

sub get_defects()
{
	my %info = ();

	# parse diff result file
	set_newlines_info(\%info, $diff_result_file, $opt_svn_root, 1);
	print_all_newlines(\%info);	# debug

	# run CppCheck
	if (!defined($opt_cppcheck_input_file)) {
		my $includes_str = get_cppcheck_includes();
		
		my $srcs_str;
		if ($opt_is_cppcheck_all) {
			$srcs_str = $cppcheck_src;
		} else {
			$srcs_str = get_target_sources(\%info);
		}
		if (length($srcs_str) == 0) {
			report_print("\nCppCheck: no modified sources\n");
			return 0;
		}
		my $cppcheck_cmd = "$cppcheck_exec $cppcheck_opts --xml $includes_str $srcs_str";

		unlink($output_cppcheck_report_file);

		report_printf("\nCppCheck: started at %s\n", now());
		open(CMD, "$cppcheck_cmd 2> $output_cppcheck_report_file |") or return -1;
		while(<CMD>) {
			chomp;
			print("CppCheck: $_\n");	
		}
		close(CMD) or return -1;
	} else {
		$output_cppcheck_report_file = $opt_cppcheck_input_file;
	} 	

	# read CppCheck result
	my $xp = XML::XPath->new(filename => $output_cppcheck_report_file);
	my $nodeset = undef;
	my @defects;

	eval {
		$nodeset = $xp->find('/results/error');
	}; goto error if $@;

	foreach my $node ($nodeset->get_nodelist) {
		my $file = $node->getAttribute('file');
		my $line = $node->getAttribute('line');

		$file = get_abs_path2($file, $opt_svn_root);

		if (is_newline(\%info, $file, $line)) {
			my $id = $node->getAttribute('id');
			my $severity = $node->getAttribute('severity');
			my $msg = $node->getAttribute('msg');
			my $defect_str = sprintf("%-15s %-15s %-30s %s:%s\n",$id, $severity, $msg, basename($file), $line);
			push(@defects, $defect_str); 
		}
	}

	if (scalar(@defects) > 0) {
		report_printf("\nCppCheck: +++ defects +++\n");
		report_printf("%-15s %-15s %-30s %s\n","ID", "SEVERITY", "MESSAGE", "FILE/LINE");
		foreach my $d (@defects) {
			report_printf($d);
		}
		report_printf("CppCheck: please check the above defects!\n\n");
	} else {
		report_printf("CppCheck: congratulations! no new defect!\n\n");
	}

	report_printf("\nCppCheck: finished at %s\n", now());
	return 0;

error:
	report_printf("\nCppCheck: error on report file\n");
	return -1;
}

sub get_style()
{
	my %info = ();

	# parse diff result file
	set_newlines_info(\%info, $diff_result_file, $opt_svn_root, 1);
	print_all_newlines(\%info);	# debug

	# read N'SIQCppStyle result
	chdir($opt_svn_root);
	
	my $cppstyle_cmd;
	if ($opt_is_cppstyle_all) {
		$cppstyle_cmd = "$cppstyle_exec -f $cppstyle_rule -o $output_dir $cppstyle_src";
	} else {
		my $srcs_str = get_target_sources(\%info);
		if (length($srcs_str) == 0) {
			report_print("\nCppStyle: no modified sources\n");
			return 0;
		}
		$cppstyle_cmd = "$cppstyle_exec -f $cppstyle_rule -o $output_dir $srcs_str";
	}

	#
	# parse stdout to print out the processing status
	#   state 0 : initial
	#   state 1 : process result for each file
	#   state 2 : summary report, violation details
	#
	open(OUTFILE, ">$output_cppstyle_report_file") or return -1;
	open(CMD, "$cppstyle_cmd |") or return -1;

	my $state = 0;
	my @violations;
	report_printf("\nCppStyle: started at %s\n", now());

	while(<CMD>) {
		print(OUTFILE $_);
		chomp;
		if (/^$/) {
			next;
		}
		if ($state == 0) {
			if (/^Processing/) {
				print($_, "\n");
				$state = 1;
				next;
			}
		} elsif ($state == 1) {
			if (/^Processing/) {
				print($_, "\n");
				next;
			} elsif (/^=/) { 
				if (/Summary Report/) {
					if (scalar(@violations) > 0) {
						report_printf("\nCppStyle: +++ violations +++\n");
						report_printf("%-15s %-7s %-50s %s\n","FILE", "LINE", "CODE", "DETAILS"); 
						foreach my $v (@violations) {
							report_print($v);
						}
						report_printf("CppStyle: please check the above violations!\n\n");
					} else {
						report_printf("CppStyle: congratulations! no new violation!\n\n");
					}
					$state = 2;
					print("\n", $_, "\n");
				} elsif (/Analyzing/) {
					$state = 0;
				} else {
					next;
				}
			} else {
				# parse violation report (one line)
				#   format:  filepath(line, column): message [code]
				my @oneline = split(/[\(\)\s\:,]+/, $_);	# delimeter ( ) , : space
				my $file = shift(@oneline);
				my $line = shift(@oneline);
				my $column = shift(@oneline);
				my $msg = join(' ', @oneline);
				my $violation_str;

				#print("PARSE: File[$file] Line[$line] Col[$column] Msg[$msg]\n");
				if (is_newline(\%info, $file, $line)) {
					my $code = "unknown";
					if ($msg =~ /(\[\w+\])/) {
						$code = substr($1, 1, length($1)-2);	# exclude [ and ]
						$msg =~ s/\[.+$//g;
					}
					$violation_str = sprintf("%-15s %-7s %-50s %s\n", basename($file), $line, $code, $msg);
					push(@violations, $violation_str);
				} 
				next;
			}
		} elsif ($state == 2) {
			print($_, "\n");	
		} else {
			print($_, "\n");
		}
	}
	close(CMD);
	close(OUTFILE);
	chdir;	
	report_printf("\nCppStyle: finished at %s\n", now());
}

sub print_var(@)
{
	my $colsize = -24;
	my $name = shift;

	printf(" - %*s = %s\n", $colsize, $name, @_);
}

sub print_global_vars()
{
	print("$util_name: +++ configurations +++\n");
	print("common:\n");
	print_var("target revision", $opt_target_revision ? $opt_target_revision : "BASE");
	print_var("util path", $util_path);
	print_var("SVN root", $opt_svn_root);
	print_var("LCOV input", $opt_lcov_input_file ? $opt_lcov_input_file : "Not specified");
	print_var("CppCheck input", $opt_cppcheck_input_file ? $opt_cppcheck_input_file : "Not specified");

	if ($opt_is_disable_coverage) {
		print_var("coverage", "OFF");
	} else {
		print_var("coverage", $opt_is_coverage_all ? "ON (all)" : "ON (modified files only)");
	}
	if ($opt_is_disable_cppcheck) {
		print_var("cppcheck", "OFF");
	} else {
		print_var("cppcheck", $opt_is_cppcheck_all ? "ON (all)" : "ON (modified files only)");
	}
	if ($opt_is_disable_cppstyle) {
		print_var("cppstyle", "OFF");
	} else {
		print_var("cppstyle", $opt_is_cppstyle_all ? "ON (all)" : "ON (modified files only)");
	}

	print("external tools:\n");
	if (!$opt_is_disable_cppcheck) {
		print_var("cppcheck_exec", $cppcheck_exec);
		print_var("cppcheck_option", $cppcheck_opts);
		print_var("cppcheck_include_dir", $cppcheck_inc);
		print_var("cppcheck_source_dir", $cppcheck_src);
	}
	if (!$opt_is_disable_cppstyle) {
		print_var("cppstyle_exec", $cppstyle_exec);
		print_var("cppstyle_rule", $cppstyle_rule);
		print_var("cppstyle_source_dir", $cppstyle_src);
	}

	print("output path:\n");
	print_var("output_directory", $output_dir);
	print_var("output_summary_report", $output_summary_report_file);
	print_var("output_lcov_report", $output_lcov_report_file);
	print_var("output_coverage_report", $output_genhtml_report_dir);
	print_var("output_cppcheck_report", $output_cppcheck_report_file);
	print_var("output_cppstyle_report", $output_cppstyle_report_file);
}

sub now()
{
	my $now = POSIX::strftime("%Y-%m-%d %H:%M:%S", localtime);
	return $now;
}

sub report_printf(@)
{
	open(FH, ">>$output_summary_report_file") or die "cannot open report file";
	printf(STDOUT @_);
	printf(FH @_);
	close(FH);
}
sub report_print(@)
{
	open(FH, ">>$output_summary_report_file") or die "cannot open report file";
	print(STDOUT @_);
	print(FH @_);
	close(FH);
}

sub sigint_handler()
{
	# ignore SIGTERM on this process
	$SIG{'TERM'} = 'IGNORE';

	# send SIGTERM to the process group
	kill 'TERM', -$$;
	my $childpid = waitpid -1, WNOHANG;

	report_printf("\n%s: interrupted by user at %s\n\n", $util_name, now());
	die("$util_name : interrupted");
}

#
# main
#

initialize();

if ($opt_is_show_config) {
	print_global_vars();
}

# make this process be a leader of this group
setpgrp $$, 0;
$SIG{'INT'} = \&sigint_handler;


$diff_result_file = get_svn_diff($opt_target_revision);
if (!defined($diff_result_file)) {
	print(STDERR "Error: cannot get svn diff result\n");	
	exit(0);
}

report_printf("\n%s: started at %s\n\n", $util_name, now());

if (!$opt_is_disable_coverage) {
	get_coverage();
}

if (!$opt_is_disable_cppcheck) {
	get_defects();
}

if (!$opt_is_disable_cppstyle) {
	get_style();
}

# finalize
if ($opt_is_remove_diff && -e $diff_result_file) {
	unlink($diff_result_file);
}

report_printf("\n%s: finished at %s\n\n", $util_name, now());


