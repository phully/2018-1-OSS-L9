provider cubrid {
	probe cub_test();
	probe pgbuf_hit();
	probe pgbuf_miss();
	probe sort_start();
	probe sort_end(nr_rows, status);
	probe tran_commit(tran_id);
	probe tran_abort(tran_id, status);
	probe tran_deadlock();
	probe tran_start(tran_id);
	probe lock_acquire_start(OID, table, type);
	probe lock_acquire_end(OID, table, type, status);
	probe lock_release_start(OID, table, type);
	probe lock_release_end(OID, table, type);
	probe idx_insert_start(classname, index_name);
	probe idx_insert_end(classname, index_name, status);
	probe idx_update_start(classname, index_name);
	probe idx_update_end(classname, index_name, status);
	probe idx_delete_start(classname, index_name);
	probe idx_delete_end(classname, index_name, status);
	probe idx_read_start(classname, index_name);
	probe idx_read_end(classname, index_name, status);
	probe obj_insert_start(table);
	probe obj_insert_end(table, status);
	probe obj_update_start(table);
	probe obj_update_end(table, status);
	probe obj_delete_start(table);
	probe obj_delete_end(table, status);
	probe obj_read_start(table);
	probe obj_read_end(table, status);
	probe query_exec_start(query_string, query_id, connection_id, user);
	probe query_exec_end(query_string, query_id, connection_id, user, status);
	probe conn_start (client_id, user);
	probe conn_end (client_id, user);
	probe io_write_start (query_id);
	probe io_write_end (query_id, size, status);
        probe io_read_start (query_id);
        probe io_read_end (query_id, size, status); 
};
