/*
 * Copyright (C) 2008 Search Solution Corporation. All rights reserved by Search Solution. 
 *
 *  This program is free software; you can redistribute it and/or modify 
 *  it under the terms of the GNU General Public License as published by 
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version. 
 *
 *  This program is distributed in the hope that it will be useful, 
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of 
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
 *  GNU General Public License for more details. 
 *
 *  You should have received a copy of the GNU General Public License 
 *  along with this program; if not, write to the Free Software 
 *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
 */

/*
 * CUBRID SystemTap Support
 *
 * USAGE: stap -k topcallstack_helper.stp -g -D MAXSTRINGLEN=1024
 *
 * DESCRIPTION: 
 *
 * This scripts gathers the backtraces of allocation function calls and provides
 * an output that will be parsed by the topcallstack script.
 *
 * NOTE:
 * This script must run in guru mode. This -g option is mandatory.
 * In order to correctly print the backtrace strings, MAXSTRINGLEN must be overw
 * overwritten with -D option.
 */

global alloc_stack;
global alloc_amount;

function get_callstack_str:string () %{ /* pragma:unwind */ /* pragma:symbols */
/* myproc-unprivileged */ /* pragma:uprobes */ /* pragma:vma */

   _stp_stack_user_sprint(STAP_RETVALUE, MAXSTRINGLEN, CONTEXT, _STP_SYM_SYMBOL | _STP_SYM_HEX_SYMBOL | _STP_SYM_OFFSET | _STP_SYM_NEWLINE);
%}

probe process("cub_server").library("libcubrid.so").function("db_private_alloc_release")
{
 callstack_str = get_callstack_str();

 alloc_stack[callstack_str]++;
 alloc_amount[callstack_str]=$$parms;
}

probe process("cub_server").library("*").function("malloc")
{
 callstack_str = get_callstack_str();

 alloc_stack[callstack_str]++;
 alloc_amount[callstack_str]=$$parms;
}

probe timer.ms(100), end
{
  foreach (stack in alloc_stack) {
    printf("<callstack>\n");
    printf("%s\n", stack);
    printf("</callstack>\n");
    printf("<count>%d</count>\n", alloc_stack[stack]);
    printf("<amount>%s</amount>\n", alloc_amount[stack]);
  }
  delete alloc_stack
  delete alloc_amount
}
