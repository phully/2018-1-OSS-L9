/*
 * CUBRID SystemTap Support
 *
 * USAGE: stap -k global_time.stp
 *
 * DESCRIPTION:
 * This script gathers time-related statistics  for the entire server.
 * The provided information contains:
 *     - the average time spent in acquiring/releasing locks
 *     - the average time spent in heap operations
 *     - the average time spent in index operations
 *     - the average time spent in I/O operations
 *
 * The scripts prints these statistics every 60 seconds.
 */
global total_index_time; /* associative array - aggregate by thread id */
global total_heap_time; /* associative array - aggregate by thread id */
global total_io_time; /* associative array - aggregate by thread id */
global total_lock_time; /* associative array - aggregate by thread id */
global index_times; /* associative array - the key comprises of: 
                     * thread id, index name, index operation - (0..3) */
global heap_times; /* associative array - the key comprises of: 
                    * thread id, class oid, heap operation - (0..3) */
global io_times; /* associative array - the key comprises of: 
                  * thread id, query_id, I/O operation - (0..1) */
global lock_times; /* associative array - the key comprises of: 
                    * thread id, oid, class oid, lock type, 
					* lock operation - (0..1) */

probe process("cub_server").library("*").mark("lock_acquire_start")
{
  lock_times[tid(), $arg1, $arg2, $arg3, 0] = gettimeofday_ns ();
}

probe process("cub_server").library("*").mark("lock_acquire_end")
{
  total_lock_time[tid()] <<< gettimeofday_ns () - lock_times[tid(), $arg1, $arg2, $arg3, 0];
}

probe process("cub_server").library("*").mark("lock_release_start")
{
  lock_times[tid(), $arg1, $arg2, $arg3, 1] = gettimeofday_ns ();
}

probe process("cub_server").library("*").mark("lock_release_end")
{
  total_lock_time[tid()] <<< gettimeofday_ns () - lock_times[tid(), $arg1, $arg2, $arg3, 1];
}

probe process("cub_server").library("*").mark("obj_read_start")
{
  heap_times[tid(), $arg1, 0] = gettimeofday_ns ();
}

probe process("cub_server").library("*").mark("obj_read_end")
{
  total_heap_time[tid()] <<< gettimeofday_ns () - heap_times[tid(), $arg1, 0];
}

probe process("cub_server").library("*").mark("obj_update_start")
{
  heap_times[tid(), $arg1, 1] = gettimeofday_ns ();
}

probe process("cub_server").library("*").mark("obj_update_end")
{
  total_heap_time[tid()] <<< gettimeofday_ns () - heap_times[tid(), $arg1, 1];
}

probe process("cub_server").library("*").mark("obj_insert_start")
{
  heap_times[tid(), $arg1, 2] = gettimeofday_ns ();
}

probe process("cub_server").library("*").mark("obj_insert_end")
{
  total_heap_time[tid()] <<< gettimeofday_ns () - heap_times[tid(), $arg1, 2];
}

probe process("cub_server").library("*").mark("obj_delete_start")
{
  heap_times[tid(), $arg1, 3] = gettimeofday_ns ();
}

probe process("cub_server").library("*").mark("obj_delete_end")
{
  total_heap_time[tid()] <<< gettimeofday_ns () - heap_times[tid(), $arg1, 3];
}

probe process("cub_server").library("*").mark("idx_update_start")
{
  index_times[tid(), $arg1, $arg2, 1] = gettimeofday_ns ();
}

probe process("cub_server").library("*").mark("idx_update_end")
{
  total_index_time[tid()] <<< gettimeofday_ns () - index_times[tid(), $arg1, $arg2, 1];
}

probe process("cub_server").library("*").mark("idx_insert_start")
{
  index_times[tid(), $arg1, $arg2, 2] = gettimeofday_ns ();
}

probe process("cub_server").library("*").mark("idx_insert_end")
{
  total_index_time[tid()] <<< gettimeofday_ns () - index_times[tid(), $arg1, $arg2, 2];
}

probe process("cub_server").library("*").mark("idx_delete_start")
{
  index_times[tid(), $arg1, $arg2, 3] = gettimeofday_ns ();
}

probe process("cub_server").library("*").mark("idx_delete_end")
{
  total_index_time[tid()] <<< gettimeofday_ns () - index_times[tid(), $arg1, $arg2, 3];
}

probe process("cub_server").library("*").mark("io_read_start")
{
  io_times[tid(), $arg1, 0] = gettimeofday_ns ();
}

probe process("cub_server").library("*").mark("io_read_end")
{
  total_io_time[tid()] <<< gettimeofday_ns () - io_times[tid(), $arg1, 0];
}

probe process("cub_server").library("*").mark("io_write_start")
{
  io_times[tid(), $arg1, 1] = gettimeofday_ns ();
}

probe process("cub_server").library("*").mark("io_write_end")
{
  total_io_time[tid()] <<< gettimeofday_ns () - io_times[tid(), $arg1, 1];
}

probe timer.s(60)
{
  count = 0;
  io_time = 0;
  heap_time = 0;
  lock_time = 0;
  idx_time = 0;
  foreach (thr_id in total_io_time+)
  {
    count = count + 1;
    io_time = io_time + @sum(total_io_time[thr_id]);
    lock_time = lock_time + @sum(total_lock_time[thr_id]);
    heap_time = heap_time + @sum(total_heap_time[thr_id]);
    idx_time = idx_time + @sum(total_index_time[thr_id]);
  }

  if (count > 0)
  {
    printf("Total io time: %d.%03d sec\n", io_time / (count * 1000000), (io_time / count) % 1000000);
    printf("Total lock time: %d.%03d sec\n", lock_time / (count * 1000000), (lock_time / count) % 1000000);
    printf("Total index time: %d.%03d sec\n", idx_time / (count * 1000000), (idx_time / count) % 1000000);
    printf("Total heap time: %d.%03d sec\n", heap_time / (count * 1000000), (heap_time / count) % 1000000);
  }
 else
  {
    printf("Total io time: 0.0 sec\n");
    printf("Total lock time: 0.0 sec\n");
    printf("Total index time: 0.0 sec\n");
    printf("Total heap time: 0.0 sec\n");
  } 
}
